{"meta":{"title":"xin's Blog","subtitle":"xin's Blog","description":"专注于linux运维","author":"xin","url":"http://xinilhy.github.io"},"pages":[{"title":"","date":"2017-02-24T09:37:05.000Z","updated":"2017-02-24T09:37:05.000Z","comments":true,"path":"archives/index.html","permalink":"http://xinilhy.github.io/archives/index.html","excerpt":"","text":""},{"title":"","date":"2017-02-24T09:37:05.000Z","updated":"2017-02-24T09:37:05.000Z","comments":true,"path":"tags/index.html","permalink":"http://xinilhy.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"文件权限","slug":"文件权限","date":"2018-09-26T13:23:05.000Z","updated":"2018-09-26T13:31:36.016Z","comments":true,"path":"2018/09/26/文件权限/","link":"","permalink":"http://xinilhy.github.io/2018/09/26/文件权限/","excerpt":"文件属性","text":"文件属性123&gt; ls -l命令可以查看文件的详细信息[root@centos7 ~ ]#ll anaconda-ks.cfg -rw-------. 1 root root 1869 Jul 18 17:44 anaconda-ks.cfg 如图，一个文件的基本属性信息包含8列：文件类型、权限、硬链接数、属主、属组、大小、创建时间、文件名，通过-i选项还可以查看具体的inode值，这里主要介绍权限和归属的修改12[root@centos7 ~ ]#ll -i anaconda-ks.cfg 100663363 -rw-------. 1 root root 1869 Jul 18 17:44 anaconda-ks.cfg 修改文件的属主和属组 chown 修改属主、属组 chgrp 修改属组 chown语法：1chown [OPTION]... [OWNER][:[GROUP]] FILE... 选项：12-R:递归设置，用于目录下的所有文件 chown [OPTION]... --reference=RFILE FILE...：参考文件修改 仅修改属主 123456789格式：chown owner file示例：[root@centos7 ~ ]#ll anaconda-ks.cfg -rw-------. 1 root root 1869 Jul 18 17:44 anaconda-ks.cfg[root@centos7 ~ ]#chown xin anaconda-ks.cfg [root@centos7 ~ ]#ll anaconda-ks.cfg -rw-------. 1 xin root 1869 Jul 18 17:44 anaconda-ks.cfg[root@centos7 ~ ]# 同时修改属主和属组 12345678格式：chown owner:group file示例：[root@centos7 ~ ]#ll anaconda-ks.cfg -rw-------. 1 xin root 1869 Jul 18 17:44 anaconda-ks.cfg[root@centos7 ~ ]#chown lhy:lhy anaconda-ks.cfg [root@centos7 ~ ]#ll anaconda-ks.cfg -rw-------. 1 lhy lhy 1869 Jul 18 17:44 anaconda-ks.cfg 仅修改属组 12345[root@centos7 ~ ]#ll anaconda-ks.cfg -rw-------. 1 lhy lhy 1869 Jul 18 17:44 anaconda-ks.cfg[root@centos7 ~ ]#chown :root anaconda-ks.cfg [root@centos7 ~ ]#ll anaconda-ks.cfg -rw-------. 1 lhy root 1869 Jul 18 17:44 anaconda-ks.cfg 注意：冒号也可以用点.来代替。 chgrp其实一个chown就可以解决了，但还是的介绍一些chgrp这个命令。语法：1chgrp [OPTION]... GROUP FILE... 选项：同chown12--reference=RFILE :参考文件设置-R 递归设置目录下的所有文件的属组 示例：12345[root@centos7 ~ ]#ll anaconda-ks.cfg -rw-------. 1 lhy root 1869 Jul 18 17:44 anaconda-ks.cfg[root@centos7 ~ ]#chgrp lhy anaconda-ks.cfg [root@centos7 ~ ]#ll anaconda-ks.cfg -rw-------. 1 lhy lhy 1869 Jul 18 17:44 anaconda-ks.cfg 权限 rwxrwrwx 权限位共9位：左三位：定义user（owner）的权限，属主权限中三位：定义group的权限，属组权限有三位：定义other的权限，其他的权限 r、w、x 123r：readable，可读w：writable，可写x：executble，可执行 对于一个文件或目录来说，r、w、x分别具有不同的功能。 对于文件 123r: 可以查看文件内容w：可以修改文件内容x：为可执行文件，可启动为一个进程 对于目录 123r：可以使用ls查看文件列表w：可以在目录中创建文件，也可以删除文件；x：可以ls 查看文件列表，可以cd进入该目录下 chmod功能：设置文件或者目录的权限语法：12345678chmod [OPTION]... OCTAL-MODE FILE..chmod [OPTION]... MODE[,MODE]... FILE...MODE： 修改一类用户的所有权限： u= g= o= ug= a= u=,g= 修改一类用户某位或某些位权限 u+ u- g+ g- o+ o- a+ a- + - 选项：12-R: 递归修改权限--reference=RFILE :参考文件修改 示例：123456789101112&gt; 修改文件的权限为rwx--xr--[root@centos7 data ]#echo &quot;hello world&quot; &gt; f1[root@centos7 data ]#ll f1-rw-r--r-- 2 root root 12 Sep 24 19:52 f1[root@centos7 data ]#chmod u=rwx,g=x f1[root@centos7 data ]#ll f1-rwx--xr-- 2 root root 12 Sep 24 19:52 f1&gt; 也可以通过修改某位的权限实现[root@centos7 data ]#chmod u+x,g=x f1[root@centos7 data ]#ll f1-rwx--xr-- 2 root root 12 Sep 24 19:52 f1 不过这种方法还是有点麻烦，其实还有更加简单的方法，就是用数字表示权限，看图： 其实就是r用数字4表示，w用数字2表示，x用数字1表示； 示例：123456&gt; 修改file权限为rw-r--r--chmod 644 file&gt; 修改file权限为rwxrw-r--chmod 764 file&gt; 修改权限为rwx------chmod 400 file","categories":[{"name":"linux","slug":"linux","permalink":"http://xinilhy.github.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://xinilhy.github.io/tags/linux/"}]},{"title":"用户和组管理","slug":"用户和组管理","date":"2018-09-26T13:22:56.000Z","updated":"2018-09-26T13:30:41.640Z","comments":true,"path":"2018/09/26/用户和组管理/","link":"","permalink":"http://xinilhy.github.io/2018/09/26/用户和组管理/","excerpt":"用户：在Linux中，用户管理是基于用户和密码的方式进行资源的分配，而UID是用户的唯一标识； 用户 UID 管理员：root 0 登录用户 500+(CentOS6) 1000+(CentOS7) 系统用户 1-499（CentOS6) 1-999)(_CentOS7)","text":"用户：在Linux中，用户管理是基于用户和密码的方式进行资源的分配，而UID是用户的唯一标识； 用户 UID 管理员：root 0 登录用户 500+(CentOS6) 1000+(CentOS7) 系统用户 1-499（CentOS6) 1-999)(_CentOS7) 组同样，GID是组的标识；| 组 | GID || :————- | ——————————— || 管理员组：root | 0 || 非系统组 | 500+(CentOS6) 1000+(CentOS7) || 系统组 | 1-499（CentOS6) 1-999)(CentOS7) | 对组进行分类的话，可以分为主组(私有组)和附加组(公共组)，所谓的主组就是创建用户的时候默认会创建一个与用户名同名的组，这个组内仅包含一个用户，即同名的用户；一个用户可以位于多个组内，而用户除了主组之外所归属的组即用户的附加组。 用户和组的配置文件 /etc/passwd 用户及其属性信息 /etc/shadow 用户密码及其相关属性 /etc/group 组及其属性信息 /etc/gshadow 组密码及其相关属性 passwd文件格式 login name：登录用名（wang） passwd：密码 (x) UID：用户身份编号 (1000) GID：登录默认所在组编号 (1000) GECOS：用户全名或注释 home directory：用户主目录 (/home/wang) shell：用户默认使用shell (/bin/bash) shadow文件格式 登录用名 用户密码:一般用sha512加密 从1970年1月1日起到密码最近一次被更改的时间 密码再过几天可以被变更（0表示随时可被变更） 密码再过几天必须被变更（99999表示永不过期） 密码过期前几天系统提醒用户（默认为一周） 密码过期几天后帐号会被锁定 从1970年1月1日算起，多少天后帐号失效 密码的复杂性策略 使用数字、大写字母、小写字母及特殊字符中至少3种 足够长 使用随机密码 定期更换,不要使用最近曾经使用过的密码 group文件格式 群组名称：就是群组名称 群组密码：通常不需要设定，密码是被记录在 /etc/gshadow GID：就是群组的 ID 以当前组为附加组的用户列表(分隔符为逗号) gshadow文件格式 群组名称：就是群组名称 群组密码： 组管理员列表：组管理员的列表，更改组密码和成员 以当前组为附加组的用户列表：(分隔符为逗号) 用户和组管理命令 用户管理命令 useradd usermod userdel 组管理命令 groupadd roupmod groupdel 用户创建：useradd语法：1useradd [options] LOGIN 选项：123456789101112-u UID-o 配合-u 选项，不检查UID的唯一性-g GID：指明用户所属基本组，可为组名，也可以GID-c &quot;COMMENT&quot;：用户的注释信息-d HOME_DIR: 以指定的路径(不存在)为家目录-s SHELL: 指明用户的默认shell程序可用列表在/etc/shells文件中-G GROUP1[,GROUP2,...]：为用户指明附加组，组须事先存在-N 不创建私用组做主组，使用users组做主组-r: 创建系统用户 CentOS 6: ID&lt;500，CentOS 7: ID&lt;1000-m 创建家目录，用于系统用户-M 不创建家目录，用于非系统用户 默认值设定：/etc/default/useradd文件中 显示或更改默认设置useradd -Duseradd –D -s SHELLuseradd –D –b BASE_DIRuseradd –D –g GROUP 练习： 123456781、创建用户gentoo，附加组为bin和root，默认shell为/bin/csh，注释信息为&quot;Gentoo Distribution&quot;2、创建下面的用户、组和组成员关系名字为webs 的组用户nginx 使用webs 作为附属组用户varnish，也使用webs 作为附属组用户mysql，不可交互登录系统，且不是webs 的成员，nginx，varnish，mysql密码都是magedu 新建用户的相关文件和命令 /etc/default/useradd /etc/skel/* /etc/login.defs newusers passwd格式文件 批量创建用户 chpasswd 批量修改用户口令 用户属性修改：usermod语法：1usermod [OPTION] login 选项：基本同useradd12345678910111213-u UID: 新UID-g GID: 新主组-G GROUP1[,GROUP2,...[,GROUPN]]]：新附加组，原来的附加组将会被覆盖；若保留原有，则要同时使用-a选项-s SHELL：新的默认SHELL-c &apos;COMMENT&apos;：新的注释信息-d HOME: 新家目录不会自动创建；若要创建新家目录并移动原家数据，同时使用-m选项-l login_name: 新的名字；-L: lock指定用户,在/etc/shadow 密码栏的增加 !-U: unlock指定用户,将 /etc/shadow 密码栏的 ! 拿掉-e YYYY-MM-DD: 指明用户账号过期日期-f INACTIVE: 设定非活动期限 删除用户：userdel语法：1userdel [OPTION]... login 选项：1-r: 删除用户家目录 查看用户相关信息123456id [OPTION]... [USER]-u: 显示UID-g: 显示GID-G: 显示用户所属的组的ID-n: 显示名称，需配合ugG使用 切换用户或以其他用户身份执行命令语法：1su [options...] [-] [user [args...]] 切换用户的方式： su UserName：非登录式切换，即不会读取目标用户的配置文件，不改变当前工作目录 su - UserName：登录式切换，会读取目标用户的配置文件，切换至家目录，完全切换 root su至其他用户无须密码；非root用户切换时需要密码 换个身份执行命令：su [-] UserName -c ‘COMMAND’ 设置密码语法：1passwd [OPTIONS] UserName: 修改指定用户的密码 选项123456789101112 常用选项：-d:删除指定用户密码-l:锁定指定用户-u:解锁指定用户-e:强制用户下次登录修改密码-f: 强制操作-n mindays: 指定最短使用期限-x maxdays：最大使用期限-w warndays：提前多少天开始警告-i inactivedays：非活动期限--stdin：从标准输入接收用户密码echo &quot;PASSWORD&quot; | passwd --stdin USERNAME 修改用户密码策略语法：1chage [OPTION]... LOGIN 选项：1234567-d LAST_DAY-E --expiredate EXPIRE_DATE-I --inactive INACTIVE-m --mindays MIN_DAYS-M --maxdays MAX_DAYS-W --warndays WARN_DAYS –l 显示密码策略 示例：123chage -d 0 tom 下一次登录强制重设密码chage -m 0 –M 42 –W 14 –I 7 tomchage -E 2016-09-10 tom 用户相关的其它命令 chfn 指定个人信息 chsh 指定shell finger 查看用户信息 创建组：groupadd语法：1groupadd [OPTION]... group_name 选项：1234-g GID: 指明GID号；[GID_MIN, GID_MAX] -r: 创建系统组 CentOS 6: ID&lt;500 CentOS 7: ID&lt;1000 组属性修改：groupmod123groupmod [OPTION]... group-n group_name: 新名字-g GID: 新的GID 组删除：groupdel1groupdel GROUP 更改组密码:gpasswd语法：1gpasswd [OPTION] GROUP 选项：123-a user 将user添加至指定组中-d user 从指定组中移除用户user-A user1,user2,... 设置有管理权限的用户列表 临时切换主组：newgrp1默认创建一个文件的属组是当前用户的主组，可以临时切换主组，从而创建指定归属组的文件，如果切换的组是该用户的附加组，可以直接切换，否则如果用户本不属于此组，则需要组密码 更改和查看组成员语法:1groupmems [options] [action] 选项：1234567options： -g, --group groupname 更改为指定组 (只有root) Actions: -a, --add username 指定用户加入组 -d, --delete username 从组中删除用户 -p, --purge 从组中清除所有成员 -l, --list 显示组成员列表 查看用户所属组列表：groups","categories":[{"name":"linux","slug":"linux","permalink":"http://xinilhy.github.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://xinilhy.github.io/tags/linux/"}]},{"title":"管道","slug":"管道","date":"2018-09-26T13:22:42.000Z","updated":"2018-09-26T13:32:47.476Z","comments":true,"path":"2018/09/26/管道/","link":"","permalink":"http://xinilhy.github.io/2018/09/26/管道/","excerpt":"管道：用符号”|”表示功能：用来连接命令，即把前一个命令的标准输出作为下一个命令的处理对象 注意：管道只处理标准输出，对于错误输出不进行处理，而显示在终端。","text":"管道：用符号”|”表示功能：用来连接命令，即把前一个命令的标准输出作为下一个命令的处理对象 注意：管道只处理标准输出，对于错误输出不进行处理，而显示在终端。 格式：命令1 | 命令2 | 命令3 | … 示例： 12345678910111213141516171819202122232425## 只有标准输出会转换；[xin@centos7 ~ ]$ls /boot/ /error |tr &apos;a-z&apos; &apos;A-Z&apos;ls: cannot access /error: No such file or directory/BOOT/:CONFIG-3.10.0-862.EL7.X86_64EFIGRUBGRUB2INITRAMFS-0-RESCUE-EABA35925CD4470A8EA2B81643FD49A2.IMGINITRAMFS-3.10.0-862.EL7.X86_64.IMGSYMVERS-3.10.0-862.EL7.X86_64.GZSYSTEM.MAP-3.10.0-862.EL7.X86_64VMLINUZ-0-RESCUE-EABA35925CD4470A8EA2B81643FD49A2## 计算1+2[root@centos7 data ]#echo 1+2|bc3## 计算1+2+3+..100的和方法1：输出1..100的值，然后tr替换空格为+，然后通过管道给bc[root@centos7 data ]#echo &#123;1..100&#125;|tr &apos; &apos; &apos;+&apos;|bc5050方法2：seq命令，-s指定分隔符[root@centos7 data ]#seq -s + 100|bc5050 错误输出默认不能通过管道进行处理，那么有没有什么办法可以处理呢？可以结合2&gt;&amp;1(将错误输出重定向到标准输出，相当于将错误的洗白)实现； 1234567891011[root@centos7 data ]#ls /error |tr &apos;a-z&apos; &quot;A-Z&quot;ls: cannot access /error: No such file or directory## 测试将错误的输出进行洗白[root@centos7 data ]#ls /error 2&gt;&amp;1 |tr &apos;a-z&apos; &quot;A-Z&quot;LS: CANNOT ACCESS /ERROR: NO SUCH FILE OR DIRECTORYok，成功实现；##其实，还有另外一种方法可以实现，只不过是一项新功能，对于一些系统可能无法实现；## 测试使用|&amp;进行洗白[root@centos7 data ]#ls /error |&amp; tr &apos;a-z&apos; &quot;A-Z&quot;LS: CANNOT ACCESS /ERROR: NO SUCH FILE OR DIRECTORY","categories":[{"name":"linux","slug":"linux","permalink":"http://xinilhy.github.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://xinilhy.github.io/tags/linux/"}]},{"title":"I/O重定向","slug":"I-O重定向","date":"2018-09-26T13:22:35.000Z","updated":"2018-09-26T13:29:36.802Z","comments":true,"path":"2018/09/26/I-O重定向/","link":"","permalink":"http://xinilhy.github.io/2018/09/26/I-O重定向/","excerpt":"标准输入和输出1.计算机中有很多程序，程序的运行依赖于指令，而指令最终服务的是数据；数据无非以下两种： 读入数据：Input 输出数据：Output","text":"标准输入和输出1.计算机中有很多程序，程序的运行依赖于指令，而指令最终服务的是数据；数据无非以下两种： 读入数据：Input 输出数据：Output 2.前面曾经说过：linux一切皆文件； 在linux中，每打开一个文件系统都会自动分配一个fd：file descriptor(文件描述符)，相当于文件的标识编号； 12345678910111213141516171819## 打开文件，放入后台[root@centos7 ansible ]# /etc/inittab &amp;## 过滤出进程编号[root@centos7 fd ]#ps aux|grep vimroot 4248 0.0 0.3 151112 4948 pts/0 S+ 09:19 0:00 vim /etc/inittabroot 4433 0.0 0.0 112704 972 pts/1 R+ 09:25 0:00 grep --color=auto vim## 进入该进程目录下的fd目录[root@centos7 fd ]#cd /proc/4248/fd[root@centos7 fd ]#ls 0 1 2 4## 查看打开文件的编号；[root@centos7 fd ]#lltotal 0lrwx------ 1 root root 64 Sep 22 09:20 0 -&gt; /dev/pts/0lrwx------ 1 root root 64 Sep 22 09:20 1 -&gt; /dev/pts/0lrwx------ 1 root root 64 Sep 22 09:19 2 -&gt; /dev/pts/0lrwx------ 1 root root 64 Sep 22 09:20 4 -&gt; /etc/.inittab.swp## 4，即打开的文件描述符；剩下的0 、1 、2就是接下来的重点内容。 linux给程序提供三种I/O设备 标准输入（STDIN） -0 默认接受来自键盘的输入 标准输出（STDOUT） -1 默认输出到终端窗口 标准错误（STDERR）-2 默认输出到终端窗口 既然上面都是默认，那么是不是可以不接受键盘的标准输入，不输出到终端，而自定义默认的位置，这就是重定向。 I/O重定向：改变默认位置 输入重定向：原来默认是键盘，可以改成其他的输入，如从文件读取输入； 输出重定向：原来默认是终端，可以改成其他的输出，如输出到文件中； 输出重定向： 正常输出重定向：&gt;（覆盖输出）、&gt;&gt;（追加输出）123456789101112准备环境：[root@centos7 data ]#cat f1hello world## 覆盖输出，原文件内容被覆盖；[root@centos7 data ]#echo &quot;passwd &quot; &gt; f1[root@centos7 data ]#cat f1passwd ## 追加输出，保留原文件内容；[root@centos7 data ]#echo &quot;passwd &quot; &gt;&gt; f1[root@centos7 data ]#cat f1passwd passwd 错误输出重定向：2&gt;（覆盖输出）、2&gt;&gt;（追加输出）12345678910111213141516## 准备环境：[root@centos7 data ]#cat f2this is hostname is centos6.10## 查看默认错误输出[root@centos7 data ]#ls /filels: cannot access /file: No such file or directory## 覆盖输出，原文件内容被清空；[root@centos7 data ]#ls /file 2&gt; f2[root@centos7 data ]#cat f2ls: cannot access /file: No such file or directory## 追加输出，[root@centos7 data ]#pssh 2&gt;&gt; f2[root@centos7 data ]#cat f2ls: cannot access /file: No such file or directorybash: pssh: command not found...Similar command is: &apos;ssh&apos; 正确和错误的都进行输出重定向：1234567891011121314151617## 标准输出到文件，错误输出到终端[root@centos7 data ]#ls /etc/motd /file &gt; f3ls: cannot access /file: No such file or directory[root@centos7 data ]#cat f3/etc/motd## 标准输出到终端，错误输出到文件[root@centos7 data ]#ls /etc/motd /file 2&gt; f3/etc/motd[root@centos7 data ]#cat f3ls: cannot access /file: No such file or directory## 将标准输出和错误输出都输出到文件[root@centos7 data ]#ls /etc/motd /file &amp;&gt; f3[root@centos7 data ]#cat f3ls: cannot access /file: No such file or directory/etc/motd 输入重定向使用&lt;来重定向标准输入 1234## 使用tr命令读取文件内容，并把小写字符转换成大写[root@centos7 data ]#tr &apos;a-z&apos; &apos;A-Z&apos; &lt; /etc/issue\\SKERNEL \\R ON AN \\M 使用&quot;&lt;&lt;终止词&quot;命令从键盘将多行重导向给标准输入 1234567891011121314151617181920212223242526272829303132## 给xin发邮件，-s指定标题，后面跟接收用户地址[root@centos7 data ]#mail -s &quot;Please call&quot; xin &lt;&lt;EOF&gt; hi wang,&gt; please give me a call when you get in, We may need&gt; EOF## 切换xin，查看邮件[root@centos7 data ]#su - xinLast login: Sat Sep 22 10:16:52 CST 2018 on pts/0## 直接输入mail命令[xin@centos7 ~ ]$mailHeirloom Mail version 12.5 7/5/10. Type ? for help.&quot;/var/spool/mail/xin&quot;: 2 messages 2 new&gt;N 1 root Sat Sep 22 10:19 20/589 &quot;xin&quot; N 2 root Sat Sep 22 10:21 19/648 &quot;Please call&quot;&amp; 2 ## 输入邮件对应编号Message 2:From root@centos7.localdomain Sat Sep 22 10:21:08 2018Return-Path: &lt;root@centos7.localdomain&gt;X-Original-To: xinDelivered-To: xin@centos7.localdomainDate: Sat, 22 Sep 2018 10:21:08 +0800To: xin@centos7.localdomainSubject: Please callUser-Agent: Heirloom mailx 12.5 7/5/10Content-Type: text/plain; charset=us-asciiFrom: root@centos7.localdomain (root)Status: Rhi wang,please give me a call when you get in, We may need&amp; quit ## quit退出 123456## cat结合多行重定向生成文件[xin@centos7 ~ ]$cat &gt;file.txt &lt;&lt;EOF&gt; hello, world&gt; EOF[xin@centos7 ~ ]$cat file.txt hello, world","categories":[{"name":"linux","slug":"linux","permalink":"http://xinilhy.github.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://xinilhy.github.io/tags/linux/"}]},{"title":"I/O重定向","slug":"xin","date":"2018-09-26T13:22:35.000Z","updated":"2018-09-26T14:05:04.431Z","comments":true,"path":"2018/09/26/xin/","link":"","permalink":"http://xinilhy.github.io/2018/09/26/xin/","excerpt":"标准输入和输出1.计算机中有很多程序，程序的运行依赖于指令，而指令最终服务的是数据；数据无非以下两种： 读入数据：Input 输出数据：Output","text":"标准输入和输出1.计算机中有很多程序，程序的运行依赖于指令，而指令最终服务的是数据；数据无非以下两种： 读入数据：Input 输出数据：Output 2.前面曾经说过：linux一切皆文件； 在linux中，每打开一个文件系统都会自动分配一个fd：file descriptor(文件描述符)，相当于文件的标识编号； 12345678910111213141516171819## 打开文件，放入后台[root@centos7 ansible ]# /etc/inittab &amp;## 过滤出进程编号[root@centos7 fd ]#ps aux|grep vimroot 4248 0.0 0.3 151112 4948 pts/0 S+ 09:19 0:00 vim /etc/inittabroot 4433 0.0 0.0 112704 972 pts/1 R+ 09:25 0:00 grep --color=auto vim## 进入该进程目录下的fd目录[root@centos7 fd ]#cd /proc/4248/fd[root@centos7 fd ]#ls 0 1 2 4## 查看打开文件的编号；[root@centos7 fd ]#lltotal 0lrwx------ 1 root root 64 Sep 22 09:20 0 -&gt; /dev/pts/0lrwx------ 1 root root 64 Sep 22 09:20 1 -&gt; /dev/pts/0lrwx------ 1 root root 64 Sep 22 09:19 2 -&gt; /dev/pts/0lrwx------ 1 root root 64 Sep 22 09:20 4 -&gt; /etc/.inittab.swp## 4，即打开的文件描述符；剩下的0 、1 、2就是接下来的重点内容。 linux给程序提供三种I/O设备 标准输入（STDIN） -0 默认接受来自键盘的输入 标准输出（STDOUT） -1 默认输出到终端窗口 标准错误（STDERR）-2 默认输出到终端窗口 既然上面都是默认，那么是不是可以不接受键盘的标准输入，不输出到终端，而自定义默认的位置，这就是重定向。 I/O重定向：改变默认位置 输入重定向：原来默认是键盘，可以改成其他的输入，如从文件读取输入； 输出重定向：原来默认是终端，可以改成其他的输出，如输出到文件中； 输出重定向： 正常输出重定向：&gt;（覆盖输出）、&gt;&gt;（追加输出）123456789101112准备环境：[root@centos7 data ]#cat f1hello world## 覆盖输出，原文件内容被覆盖；[root@centos7 data ]#echo &quot;passwd &quot; &gt; f1[root@centos7 data ]#cat f1passwd ## 追加输出，保留原文件内容；[root@centos7 data ]#echo &quot;passwd &quot; &gt;&gt; f1[root@centos7 data ]#cat f1passwd passwd 错误输出重定向：2&gt;（覆盖输出）、2&gt;&gt;（追加输出）12345678910111213141516## 准备环境：[root@centos7 data ]#cat f2this is hostname is centos6.10## 查看默认错误输出[root@centos7 data ]#ls /filels: cannot access /file: No such file or directory## 覆盖输出，原文件内容被清空；[root@centos7 data ]#ls /file 2&gt; f2[root@centos7 data ]#cat f2ls: cannot access /file: No such file or directory## 追加输出，[root@centos7 data ]#pssh 2&gt;&gt; f2[root@centos7 data ]#cat f2ls: cannot access /file: No such file or directorybash: pssh: command not found...Similar command is: &apos;ssh&apos; 正确和错误的都进行输出重定向：1234567891011121314151617## 标准输出到文件，错误输出到终端[root@centos7 data ]#ls /etc/motd /file &gt; f3ls: cannot access /file: No such file or directory[root@centos7 data ]#cat f3/etc/motd## 标准输出到终端，错误输出到文件[root@centos7 data ]#ls /etc/motd /file 2&gt; f3/etc/motd[root@centos7 data ]#cat f3ls: cannot access /file: No such file or directory## 将标准输出和错误输出都输出到文件[root@centos7 data ]#ls /etc/motd /file &amp;&gt; f3[root@centos7 data ]#cat f3ls: cannot access /file: No such file or directory/etc/motd 输入重定向使用&lt;来重定向标准输入 1234## 使用tr命令读取文件内容，并把小写字符转换成大写[root@centos7 data ]#tr &apos;a-z&apos; &apos;A-Z&apos; &lt; /etc/issue\\SKERNEL \\R ON AN \\M 使用&quot;&lt;&lt;终止词&quot;命令从键盘将多行重导向给标准输入 1234567891011121314151617181920212223242526272829303132## 给xin发邮件，-s指定标题，后面跟接收用户地址[root@centos7 data ]#mail -s &quot;Please call&quot; xin &lt;&lt;EOF&gt; hi wang,&gt; please give me a call when you get in, We may need&gt; EOF## 切换xin，查看邮件[root@centos7 data ]#su - xinLast login: Sat Sep 22 10:16:52 CST 2018 on pts/0## 直接输入mail命令[xin@centos7 ~ ]$mailHeirloom Mail version 12.5 7/5/10. Type ? for help.&quot;/var/spool/mail/xin&quot;: 2 messages 2 new&gt;N 1 root Sat Sep 22 10:19 20/589 &quot;xin&quot; N 2 root Sat Sep 22 10:21 19/648 &quot;Please call&quot;&amp; 2 ## 输入邮件对应编号Message 2:From root@centos7.localdomain Sat Sep 22 10:21:08 2018Return-Path: &lt;root@centos7.localdomain&gt;X-Original-To: xinDelivered-To: xin@centos7.localdomainDate: Sat, 22 Sep 2018 10:21:08 +0800To: xin@centos7.localdomainSubject: Please callUser-Agent: Heirloom mailx 12.5 7/5/10Content-Type: text/plain; charset=us-asciiFrom: root@centos7.localdomain (root)Status: Rhi wang,please give me a call when you get in, We may need&amp; quit ## quit退出 123456## cat结合多行重定向生成文件[xin@centos7 ~ ]$cat &gt;file.txt &lt;&lt;EOF&gt; hello, world&gt; EOF[xin@centos7 ~ ]$cat file.txt hello, world","categories":[{"name":"service","slug":"service","permalink":"http://xinilhy.github.io/categories/service/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://xinilhy.github.io/tags/linux/"}]},{"title":"inode和软链接","slug":"inode和软链接","date":"2018-09-26T13:22:08.000Z","updated":"2018-09-26T13:27:28.127Z","comments":true,"path":"2018/09/26/inode和软链接/","link":"","permalink":"http://xinilhy.github.io/2018/09/26/inode和软链接/","excerpt":"inode介绍inode（index node）表：用于存放磁盘上文件的元数据信息。 文件的元数据信息包括如下几个部分：","text":"inode介绍inode（index node）表：用于存放磁盘上文件的元数据信息。 文件的元数据信息包括如下几个部分： 文件类型，权限，UID，GID 链接数（指向这个文件名路径名称个数） 该文件的大小和不同的时间戳 数据块指针：指向磁盘上文件的真正数据的磁盘块block 有关文件的其他数据 系统通过inode表中的指针寻找文件的数据，而管理员通过文件名引用 cp和inode的关系：cp命令做的事情实际上就是分配一个空闲的inode号，然后在inode表中生成一个新条目，然后在目录中创建一个目录项，然后将名称与inode编号关联，最后拷贝数据生成新的文件 rm和inode的关系：删除文件时，实际上是释放文件的inode号，文件的block数据实际上并不会马上被删除，直到有另一个文件使用该block时才会删除。 mv和inode的关系：mv和inode的关系：如果mv的目标文件和源文件在同一个分区内，那么move后的文件的inode号并不会改变，因为该文件实际的block位置并没有改变。但是如果目标和源在一个不同的分区中， 那么mv就相当于cp和rm了，mv后的文件的inode号将会被改变，因为文件的block变了。 ls -i 显示文件的inode节点号，每个分区的inode节点编号都是独立分配的。因此不同分区中的文件的inode值可能会一样。 df -i 显示每个分区的inode编号最大值，在同一分区mv文件，文件的inode值不变，inode值不变也就意味着磁盘块不变。因此同一分区移动文件特别快 1234567891011121314151617181920212223[root@CentOS6 ~ ]#ll -itotal 1082752725 -rw-------. 1 root root 1445 Sep 19 2018 anaconda-ks.cfg2752533 drwxr-xr-x. 2 root root 4096 Sep 14 2018 Desktop2752537 drwxr-xr-x. 2 root root 4096 Sep 14 2018 Documents2752534 drwxr-xr-x. 2 root root 4096 Sep 14 2018 Downloads2752514 -rw-r--r--. 1 root root 50968 Jul 18 2018 install.log2752515 -rw-r--r--. 1 root root 11698 Jul 18 2018 install.log.syslog2752724 -rw-r--r--. 1 root root 1445 Sep 19 2018 ks6.cfg2752538 drwxr-xr-x. 2 root root 4096 Sep 14 2018 Music2752539 drwxr-xr-x. 2 root root 4096 Sep 14 2018 Pictures2752536 drwxr-xr-x. 2 root root 4096 Sep 14 2018 Public2752535 drwxr-xr-x. 2 root root 4096 Sep 14 2018 Templates2752540 drwxr-xr-x. 2 root root 4096 Sep 14 2018 Videos[root@CentOS6 ~ ]#df -iFilesystem Inodes IUsed IFree IUse% Mounted on/dev/sda2 3203072 104733 3098339 4% /tmpfs 125377 4 125373 1% /dev/shm/dev/sda1 65536 38 65498 1% /boot/dev/sda3 1921360 15 1921345 1% /data/dev/sr0 0 0 0 - /media/CentOS_6.10_Final 硬链接和软链接硬链接 本质上是同一个文件，相当于起一个别名； inode号相同； 创建时硬链接数递增 删除文件： 硬链接数递减 文件要存在，至少有一个链接数； 当硬链接数为0时，该文件被删除； 删除原文件后，依然可以通过硬链接访问； 不能跨越驱动器或分区 不能针对目录创建 语法： 1ln filename [linkname] 符号（软）链接 不同文件，想当于创建一个快捷方式； 一个符号链接的内容是它引用的源文件的内容； inode节点号不同； 创建后硬链接数不增长； 可以对目录创建； 可以跨分区； 删除源文件后，软链接失效； 语法： 1ln -s filename [linkname] readlink命令功能：读取软链接指向的真实路径1234567891011121314151617181920212223242526[root@centos7 / ]#lltotal 32lrwxrwxrwx. 1 root root 7 Jul 18 17:25 bin -&gt; usr/bindr-xr-xr-x. 5 root root 4096 Jul 18 17:44 bootdrwxr-xr-x. 3 root root 22 Sep 21 15:48 datadrwxr-xr-x 19 root root 3300 Sep 21 11:08 devdrwxr-xr-x. 138 root root 12288 Sep 21 14:05 etcdrwxr-xr-x. 3 root root 17 Jul 18 17:43 homelrwxrwxrwx. 1 root root 7 Jul 18 17:25 lib -&gt; usr/liblrwxrwxrwx. 1 root root 9 Jul 18 17:25 lib64 -&gt; usr/lib64drwxr-xr-x. 2 root root 6 Apr 11 12:59 mediadrwxr-xr-x. 2 root root 6 Apr 11 12:59 mntdrwxr-xr-x. 3 root root 16 Jul 18 17:35 optdr-xr-xr-x 223 root root 0 Sep 21 11:07 procdr-xr-x---. 17 root root 4096 Sep 21 15:48 rootdrwxr-xr-x 40 root root 1260 Sep 21 20:01 runlrwxrwxrwx. 1 root root 8 Jul 18 17:25 sbin -&gt; usr/sbindrwxr-xr-x. 2 root root 6 Apr 11 12:59 srvdr-xr-xr-x 13 root root 0 Sep 21 11:07 sysdrwxrwxrwt. 14 root root 4096 Sep 21 16:11 tmpdrwxr-xr-x. 13 root root 155 Jul 18 17:25 usrdrwxr-xr-x. 21 root root 4096 Sep 20 20:42 var[root@centos7 / ]#readlink binusr/bin[root@centos7 / ]#readlink libusr/lib 如何查找一个文件的硬链接文件？123456[root@centos7 data ]#ln f1 f4[root@centos7 data ]#ll f1-rw-r--r-- 2 root root 0 Sep 21 20:18 f1[root@centos7 data ]#find -samefile f1./f1./f4","categories":[{"name":"linux","slug":"linux","permalink":"http://xinilhy.github.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://xinilhy.github.io/tags/linux/"}]},{"title":"文件类型和相关命令","slug":"文件类型和相关命令","date":"2018-09-26T13:21:04.000Z","updated":"2018-09-26T13:25:19.352Z","comments":true,"path":"2018/09/26/文件类型和相关命令/","link":"","permalink":"http://xinilhy.github.io/2018/09/26/文件类型和相关命令/","excerpt":"文件类型 -：普通文件 d：目录文件 b：块设备，支持以“block”为单位进行随机访问 c：字符设备，支持以”character”为单位进行线性访问 l：符号链接文件 p：管道文件 s：套接字socket文件","text":"文件类型 -：普通文件 d：目录文件 b：块设备，支持以“block”为单位进行随机访问 c：字符设备，支持以”character”为单位进行线性访问 l：符号链接文件 p：管道文件 s：套接字socket文件 路径绝对路径：从/开始的路径；相对路径名：想对于当前目录的路径； .：当前目录 ..：上级目录 ~：用户的家目录 -：切换上次输入的目录，和命令配合使用 常用命令basename——基名12[root@CentOS6 ~ ]#basename /etc/sysconfig/network-scripts/ifcfg-eth0ifcfg-eth0 dirname——目录名12[root@CentOS6 ~ ]#dirname /etc/sysconfig/network-scripts/ifcfg-eth0/etc/sysconfig/network-scripts pwd——显示当前工作目录12[root@CentOS6 ~ ]#pwd/root cd——切换目录12345678910111213cd：切换到家目录cd ~：切换到家目录cd ~USERNAME：切换到用户USERNAME的家目录cd -：在上一次所在目录与当前目录来回切换（PWD to OLDPWD）cd ..：切换到上级目录cd /path/to/directory 切换到一个绝对目录cd path/to/directory：切换到一个相对目录 ls——列出内容12345678910111213141516-a， --all：列出所有文件包含隐藏文件-A，--almost-all：列出除.和..之外所有的文件-F：-F参数在目录名后加了正斜线（/），以方便用户在输出中分辨它们。类似地，它会在可执行 文件（比如上面的my_script文件）的后面加个星号，以便用户找出可在系统上运行的文件。l，--long：长格式信息，列出文件的详细属性，命令可以简写为ll，alias ll=&apos;ls -l --color=auto&apos;-h，--human-readable：size用人类可读的格式表示-d, --directory：查看目录本身而非内部的文件详情-r, --reverse：反转排序（降序）-R, --recursive 递归显示（基本不用这个，递归显示用tree命令更直观）-t：按修改时间排序 cat命令——查看文件内容选项： -s:压缩空白行为一行 -n：显示行号 -A：显示所有特殊字符 123456[root@CentOS6 test ]#cat -A f1hello world$$my host is xin$$$ tac命令——和cat相反123456[root@CentOS6 test ]#cat f1hello worldmy host is xin[root@CentOS6 test ]#tac f1my host is xinhello world rev命令123[root@CentOS6 test ]#rev f1dlrow ollehnix si tsoh ym stat命令——查看文件状态12345678910[root@CentOS6 test ]#stat f1 File: `f1&apos; Size: 30 Blocks: 8 IO Block: 4096 regular fileDevice: 803h/2051d Inode: 261636 Links: 1Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)Access: 2008-08-11 21:51:13.173001280 +0800Modify: 2008-08-11 21:51:09.969004686 +0800Change: 2008-08-11 21:51:09.978004008 +0800## 内容有文件权限、文件属主和属组，文件大小，atime、mtime、ctime等内容； touch命令——创建空文件或刷新时间语法： 1touch [OPTION]... FILE... 选项： 12345-a 仅改变 atime和ctime-m 仅改变 mtime和ctime-t [[CC]YY]MMDDhhmm[.ss] 指定atime和mtime的时间戳-c 如果文件不存在，则不予创建，即用于刷新时间； cp命令——复制文件或目录语法： 1234cp [OPTION]... [-T] SOURCE DESTcp [OPTION]... SOURCE... DIRECTORYcp [OPTION]... -t DIRECTORY SOURCE...cp SRC DEST 选项： 1234567891011121314151617-i：覆盖前提示 –n:不覆盖，注意两者顺序-r, -R: 递归复制目录及内部的所有内容-a: 归档，相当于-dR --preserv=all-d：--no-dereference --preserv=links 不复制原文件，只复制链接名--preserv[=ATTR_LIST] mode: 权限 ownership: 属主属组 timestamp: links xattr context all-p: 等同--preserv=mode,ownership,timestamp-v: --verbose-f: --force-u:--update 只复制源比目标更新文件或目标不存在的文件--backup=numbered 目标存在，覆盖前先备份加数字后缀 练习： 1、定义别名命令baketc，每天将/etc/目录下所有文件，备份到/app独立的子目录下，并要求子目录格式为 backupYYYY-mm-dd，备份过程可见 2、创建/app/rootdir目录，并复制/root下所有文件到该目录内，要求保留原有权限 mv——移动和重命名文件语法： 123mv [OPTION]... [-T] SOURCE DESTmv [OPTION]... SOURCE... DIRECTORYmv [OPTION]... -t DIRECTORY SOURCE.. 选项： 12-f：强制移动或覆盖-i：交互式 rm命令——删除语法： 1rm [OPTION]... FILE... 选项： 12345-i 交互式-f 强制删除-r 递归 --no-preserve-root 删除/ 注意：rm -rf /*是可以删除根的，建议对rm命令设置别名，即rm file时移动文件到一个固定目录下。 如何删除大文件？如果删除一个文件后，空间并未成功释放，是由于某个进程在使用该文件。 建议删除文件的步骤： 1234## 先清空文件内容&gt; file## 再rm删除rm -rf file tree命令——以树状形式显示目录结构选项： 12345-d: 只显示目录-L level：指定显示的层级数目-P pattern: 只显示由指定pattern匹配到的路径 mkdir命令——创建目录选项： 123-p：递归创建-v：显示详细信息-m：指定权限 rmdir命令——删除空目录练习：1.如何创建/testdir/dir1/x, /testdir/dir1/y, /testdir/dir1/x/a, /testdir/dir1/x/b, /testdir/dir1/y/a, /testdir/dir1/y/b 2.如何创建/testdir/dir2/x, /testdir/dir2/y, /testdir/dir2/x/a, /testdir/dir2/x/b 3.如何创建/testdir/dir3, /testdir/dir4, /testdir/dir5, /testdir/dir5/dir6, /testdir/dir5/dir7","categories":[{"name":"linux","slug":"linux","permalink":"http://xinilhy.github.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://xinilhy.github.io/tags/linux/"}]},{"title":"linux简单命令","slug":"linux简单命令","date":"2018-09-26T13:03:54.000Z","updated":"2018-09-26T13:19:34.936Z","comments":true,"path":"2018/09/26/linux简单命令/","link":"","permalink":"http://xinilhy.github.io/2018/09/26/linux简单命令/","excerpt":"linux终端设备终端： 物理终端 虚拟终端","text":"linux终端设备终端： 物理终端 虚拟终端 图形终端 伪终端 什么是shell？Shell 是Linux系统的用户界面，提供了用户与内核进行交互操作的一种接口。 它接收用户输入的命令并把它送入内核去执行 。 shell也是一种高级程序设计语言。 查看系统默认shell？12[root@centos7 data ]#echo $SHELL/bin/bash 查看系统支持的所有shell？123456789[root@centos7 data ]#cat /etc/shells/bin/sh/bin/bash/sbin/nologin/usr/bin/sh/usr/bin/bash/usr/sbin/nologin/bin/tcsh/bin/csh 命令提示符12[root@centos7 data ]#其中，#为管理员；$为普通用户； 查看提示符格式：12[root@centos7 data ]#echo $PS1\\[\\e[1;42;37m\\][\\u@\\h \\W ]\\$\\[\\e[0m\\] 修改提示符格式：1234567891011PS1=&quot;\\[\\e[1;5;41;33m\\][\\u@\\h \\W]\\\\$\\[\\e[0m\\]&quot; \\e \\033 \\u 当前用户 \\h 主机名简称 \\H 主机名 \\w 当前工作目录 \\W 当前工作目录基名 \\t 24小时时间格式 \\T 12小时时间格式 \\! 命令历史数 \\# 开机后命令历史数 颜色配置：字体颜色和背景颜色格式： 12345678910111213\\e[F;Bm \\e[0m ## \\e等同于\\033,尾部以&apos;\\e[0m&apos;关闭颜色输出##F是背景颜色，B是字体颜色F B30 40 黑色31 41 红色32 42 绿色33 43 黄色 34 44 蓝色35 45 紫红色36 46 青蓝色37 47 白色另外：1表示高亮显示；5表示闪烁 示例： 查看帮助：man bash——————/PROMPTING linux命令介绍分类内部命令shell集成的，当用户登录时，根据/etc/passwd进行加载shell，并把命令加载到内存中。 查看: 12helpenable 外部命令在文件系统路径下有对应的可执行程序文件 查看： 1which -a |--skip-alias ; whereis 判断内部或外部命令1type -a command ### hash缓存表系统初始hash表为空，当外部命令执行时，默认会从PATH路径下寻找该命 令，找到后会将这条命令的路径记录到hash表中，当再次使用该命令时，shell解 释器首先会查看hash表，存在将执行之，如果不存在，将会去PATH路径下寻找。 利用hash缓存表可大大提高命令的调用速率 hash常见用法12345678## 显示hash缓存hash -l## 清除name缓存hash -d name## 清除所有缓存hash -r 命令别名显示当前shell进程所有可用的命令别名1alias 定义别名1alias NAME=&apos;VALUE&apos; 注意：在命令行中定义的别名，仅对当前shell进程有效 永久保存：1234567只有写入配置文件才能永久保存仅对当前用户：~/.bashrc 对所有用户有效：/etc/bashrc默认写入文件后，不会立即生效，需要bash进程重新读取配置文件source /path/to/config_file. /path/to/config_file 撤销别名12unalias [-a] name-a:取消所有别名 如何执行原命令123456\\command&quot;command&quot;&apos;command&apos;##如果是外部命令，还可以使用绝对路径执行/path/command 命令格式1COMMAND [OPTIONS...] [ARGUMENTS...] 选项：实现特定的功能 ​ 短选项：-c，例如：-h，-l ​ 长选项：–word 例如：–all, –human-readable 参数：命令的作用对象，比如文件名，用户名等 注意： 多个选项以及多参数和命令之间使用空白字符分隔 取消和结束命令执行：Ctrl+c，Ctrl+d 多个命令可以用;符号分开 一个命令可以用\\分成多行 日期和时间linux的两种时钟​ 系统时钟：由Linux内核通过CPU的工作频率进行的 ​ 硬件时钟：主板 命令： ​ 查看或设置系统时间：date 12345678910111213141516171819## 显示CST时间[root@centos7 data ]#dateFri Sep 21 16:45:17 CST 2018## 显示utc时间[root@CentOS6 ~ ]#date --utcFri Sep 21 08:26:24 UTC 2018## 以年、月、date +%F：date +%Y-%m-%d或者date +%F## 以时、分、秒格式显示：date +%H:%M:%S或 date +%T## 计算当前时间到1970-1-1（unix的诞生日）的秒date +%s## 转换为天数date -d @+上面的秒## 显示昨天的时间date -d &apos;-1 day&apos;## 显示明天的时间date -d &apos;1 day&apos;## 支持：day、month、year 12设置时间date -s &quot;2008-08-11 20:00:00&quot; ​ 查看硬件时间：clock或hwclock 123456[root@CentOS6 ~ ]#clockFri 21 Sep 2018 05:28:57 PM CST -0.125678 seconds选项：-s, --hctosys 设置系统时间，硬件时间覆盖系统时间。-w, --systohc 设置硬件时间，系统时间覆盖硬件时间。 关机和重启命令关机：halt poweroff重启：reboot​ -f：强制，不调用shutdown ​ -p：切断电源 关机或重启：shutdown ​ shutdown [OPTION]… TIME [MESSAGE] ​ -r: reboot ​ -h: halt ​ -c：cancel ​ TIME:无指定，默认相当于 +1 ​ now: 立刻,相当于+0 ​ +m: 相对时间表示法，几分钟之后；例如 +3 ​ hh:mm: 绝对时间表示，指明具体时间 screen命令123456789101112创建新screen会话 screen –S [SESSION] 加入screen会话 screen –x [SESSION] 退出并关闭screen会话exit 剥离当前screen会话Ctrl+a,d 显示所有已经打开的screen会话 screen -ls 恢复某screen会话 screen -r [SESSION] echo命令功能：显示字符语法：echo [-neE][字符串]说明：echo会将输入的字符串送往标准输出。输出的字符串间以空白字符隔开,并在最后加上换行号 选项：12345678910111213141516171819202122232425262728293031323334353637-E （默认）不支持 \\ 解释功能-n 不自动换行 -e 启用 \\ 字符的解释功能显示变量:echo $变量名启用命令选项-e，若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出​ \\a alert (bell)————发出警告声​ \\b backspace————删除前一个字符​ \\c suppress further output——————最后不加上换行符号​ \\e escape character————————\\033​ \\f form feed————————————换行但光标仍旧停留在原来的位置；​ \\n new line————————————换行且光标移至行首；​ \\r carriage return——————————光标移至行首，但不换行，即覆盖开始内容​ \\t horizontal tab——————————插入tab​ \\v vertical tab—————————— \\v 与\\f相同​ \\\\ backslash————————————插入一个“\\”​ \\0nnn ，插入nnn（八进制）所代表的ASCII字符 echo -e &apos;\\033[43;31;5mmagedu\\033[0m&apos;​ \\xHH 插入HH（十六进制）所代表的ASCII字符 命令行扩展 $( ) 或 1234[root@CentOS6 ~ ]#echo &quot;This system&apos;s name is $(hostname)&quot; This system&apos;s name is CentOS6.10[root@CentOS6 ~ ]#echo &quot;i am `whoami` &quot;i am root 括号扩展：{}功能:打印重复 字符串的简化形式 1234567891011[root@CentOS6 ~ ]#echo &#123;1..10&#125;1 2 3 4 5 6 7 8 9 10[root@CentOS6 ~ ]#echo &#123;1,3,5&#125;1 3 5[root@CentOS6 ~ ]#echo &#123;a..z&#125;a b c d e f g h i j k l m n o p q r s t u v w x y z[root@CentOS6 ~ ]#echo &#123;1..10..2&#125;1 3 5 7 9[root@CentOS6 ~ ]#echo file&#123;1,3,5&#125;file1 file3 file5[root@CentOS6 ~ ]#rm -f file&#123;1,3,5&#125; 命令行历史1234567执行前一条命令（去除参数）： !:0执行history命令输出对应序号n的命令： !n执行history历史中倒数第n个命令: !-ncommand !^ 利用上一个命令的第一个参数做cmd的参数command !$ 利用上一个命令的最后一个参数做cmd的参数command !* 利用上一个命令的全部参数做cmd的参数command !:n 利用上一个命令的第n个参数做cmd的参数 history命令语法: 123history [-c] [-d offset] [n]history -anrw [filename]history -ps arg [arg...] 选项： 123456789c: 清空命令历史-d offset: 删除历史中指定的第offset个命令n: 显示最近的n条历史-a: 追加本次会话新执行的命令历史列表至历史文件-r: 读历史文件附加到历史列表-w: 保存历史列表到指定的历史文件-n: 读历史文件中未读过的行到历史列表-p: 展开历史参数成多行，但不存在历史列表中-s: 展开历史参数成一行，附加在历史列表后 bash快捷键12345678Ctrl + l 清屏，相当于clear命令Ctrl + c 终止命令Ctrl + z 挂起命令Ctrl + c 终止命令Ctrl + z 挂起命令Ctrl + u 从光标处删除至命令行首Ctrl + k 从光标处删除至命令行尾Alt + r 删除当前整行Alt + N 提示输入指定字符后，重复显示该字符N次 whatis命令功能：显示命令的简短描述 基于数据库进行查询 刚安装后不可立即使用，需要makewhatis(Centos6) mandb(Centos7)制作数据库 示例： 1whatis cal 或 man –f cal 如何获取命令帮助？内部命令12help commandman bash 外部命令​ 1234567891011方法1：command --help方法2：使用man手册方法3：info command方法4：程序自身的帮助文档 README INSTALL ChangeLog方法5：发行版的官方文档方法6：程序官方文档建议;先whatis command查看具体的章节，然后再man 章节 command；","categories":[{"name":"linux","slug":"linux","permalink":"http://xinilhy.github.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://xinilhy.github.io/tags/linux/"}]},{"title":"linux基础知识","slug":"linux基础知识","date":"2018-09-26T12:59:20.000Z","updated":"2018-09-26T13:19:23.536Z","comments":true,"path":"2018/09/26/linux基础知识/","link":"","permalink":"http://xinilhy.github.io/2018/09/26/linux基础知识/","excerpt":"计算机系统的组成计算机系统由硬件(Hardware)系统和软件(Software)系统两大部分组成","text":"计算机系统的组成计算机系统由硬件(Hardware)系统和软件(Software)系统两大部分组成 冯·诺依曼体系结构： 1946年数学家冯·诺依曼于提出 运算器、控制器、存储器、输入设备、输出设备 linux起源1991年的10月5日，Torvalds在comp.os.minix新闻组上发布 消息，正式向外宣布他自行编写的完全自由免费的内核诞生 （Freeminix-like kernel sources for 386-AT）——— FREAX，英文含义是怪诞的、怪物、异想天开 类Unix的内核，在GPL下发布 官网：www.kernel.org 如：CentOS,Ubuntu,Android linux发行版 slackware:SUSE linux Enterprise Server debian: Ubuntu , mint redhat： RHEL: RedHat Enterprise Linux ArchLinux：轻量简洁 Gentoo：极致性能，不提供传统意义的安装程序 LFS: Linux From scratch 自制Linux Android: kernel+busybox（工具集）+java虚拟机 linux分支参考网站 ​ http://futurist.se/gldt/ ​ http://www.mindpin.com/d3js-demo/linux/ linux内核 linux哲学思想 一切都是一个文件（包括硬件） 小型，单一用途的程序 链接程序，共同完成复杂的任务 避免令人困惑的用户界面 配置数据存储在文本中 获取linux发行版 https://wiki.centos.org/Download http://mirrors.aliyun.com http://mirrors.sohu.com http://mirrors.163.com","categories":[{"name":"linux","slug":"linux","permalink":"http://xinilhy.github.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://xinilhy.github.io/tags/linux/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-09-12T05:15:18.789Z","updated":"2018-09-26T13:38:55.288Z","comments":true,"path":"2018/09/12/hello-world/","link":"","permalink":"http://xinilhy.github.io/2018/09/12/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post 1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}